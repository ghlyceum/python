[
  
  {
    "title": "0: Introductie & Leerdoelen",
    "url": "/posts/les-0-introductie/",
    "categories": "Lessen",
    "tags": "",
    "date": "2024-04-04 08:00:00 +0200",
    





    
    "snippet": "IntroductieHet doel van deze module is het leren van Python, we zullen dit doen door middel van de programmeertaak Python enMinetest.Wat is Minetest? Minetest is een voxel based game waarin spelers...",
    "content": "IntroductieHet doel van deze module is het leren van Python, we zullen dit doen door middel van de programmeertaak Python enMinetest.Wat is Minetest? Minetest is een voxel based game waarin spelers werelden kunnen bouwen. Voxel based betekent dat hetnet zoals Minecraft gaat om het plaatsen van blokjes.In deze module zullen we de wereld van Minetest gebruiken om Python te leren.Elke les begint met een korte introductie van het onderwerp en de leerdoelen die erbij horen. Voor elk van de leerdoelenkomen ook vragen, je zult achteraf dus een beeld krijgen of je deze snapt of niet. Bij elke les staat ook de optie omfeedback te geven. Deze is zeer welkom, hierdoor krijg ik een beter beeld wat jullie moeilijk, makkelijk en leuk vinden.PlanningDe planning is als volgt1:  Les 1: Functies, Controle (if-statements) &amp; variabelen (23 mei)  Les 2: Lijsten (Arrays) (30 mei)  Les 3: Loops (For en while) (6 juni)  Les 4: Eindopdracht tijd (13 juni)BeoordelingDe beoordeling is een combinatiecijfer van de opdrachten en de eindopdracht. De eindopdracht is een opdracht waarbij jeeen eigen gebouw of stad maakt in Miney.De eindopdracht is een combinatie van alle leerdoelen die je hebt geleerd en is een individuele opdracht.OpdrachtenEr zijn 2 type opdrachten:  Python opdrachten. Deze opdrachten maak je op basis van de opgaven van de site. Sommige aspecten van Python zijnmoeilijk om in een Miney vorm te zetten, hierdoor wordt deze methodiek gebruikt.  Miney opdrachten. Hierbij doe je daadwerkelijk dingen in de voxel wereld zoals het plaatsen, manipuleren envernietigen van blokjes.Het maken van opdrachten.Als je een opdracht gaat maken adviseer ik je om het volgende te doen:  Noteer wat je denkt dat de opdracht inhoudt.  Noteer wat je denkt dat de oplossing is.  Maak de opdracht.  Test je oplossing en corrigeer waar nodig.Dit is een goede manier om te leren programmeren.Het is belangrijk om te weten dat programmeren een vaardigheid is die je moet oefenen.Het is niet iets dat je in 1 keer zult snappen, maar naar mate je het meer doet, hoe beter je er in wordt!Het idee van het 4 stappen process is dat je leert om fouten te analyseren en te corrigeren,elke programmeur maakt fouten, het is de kunst om het op te lossen.In het begin is het misschien wat hinderlijk om deze stappen te volgen, maar naar mate je het vaker doet, zal je dezestappen niet eens meer hoeven op te schrijven, omdat je ze uit jezelf al uit je hoofd doet.We spreken dan over het ontwikkelen van abstractie.Hierbij komen we direct bij onze eerste definitie!AbstractieAbstractie is een manier om programmeren makkelijker en overzichtelijker te maken door alleen de relevante informatie tebetrekken.Bijvoorbeeld: Stel je voor dat je een auto bestuurt.Tijdens het rijden hoef je alleen te weten hoe je moet sturen, schakelen, remmen en gas moet geven.Je hoeft niet precies te weten hoe de motor werkt of hoe de remmen worden aangestuurd.Abstractie in programmeren werkt op dezelfde manier: je gebruikt eenvoudige en overzichtelijke informatie omingewikkelde processen te beheren.Engels taalgebruikIk heb geprobeerd zo min mogelijk Engelse termen in de syllabus op te nemen. Zo heb ik bepaalde functies herschrevennaar een Nederlandse variant (bijv. plaats_blok in plaats van place_block). Voor de netheid zijn de Engelse varianten erdus wel, dus mocht het je verwarrend vinden om Engels en Nederlands door elkaar te gebruiken, deze optie staat overalaan. Houd er rekening mee dat het standaard in het Engels staat, maar dat je dus kan klikken op Nederlands als je datliever hebt.Welke taal je gebruikt maakt niet uit, maar wees wel consistent, het heeft geen invloed op je cijfer. Kies wat JIJ fijn vindt.DefinitiesAls er een stukje definitie is, pak deze er altijd bij als je even niet meer snapt hoe iets werkt. De definities lichtenkort toe wat er van belang is en waarom!In de tekst staan er ook continu links naar wanneer termen worden gebruikt. Klik hier vooral op om even je geheugen teverversen. Leren programmeren kan veel tijd kosten, maar het jezelf niet moeilijker dan nodig.OntwikkelomgevingLes 0 staat in het teken van het opzetten van de ontwikkelomgeving en de opbouw van het curriculum.Een ontwikkelomgeving geeft je het gereedschap nodig om te kunnen programmeren. In dit geval zil alles bij elkaar inMiney.Miney bestaat uit de volgende 3 onderdelen:  Minetest. Minetest is een open-source Minecraft-achtige wereld waarin je kan programmeren.  Python. Python is een programmeertaal die je kan gebruiken om te programmeren.  Miney-API. De Miney-API maakt een verbinding tussen Minetest en Python zodat je de wereld in Minetest kan beinvloedenmet Python-code.Na het downloaden van Miney heb je direct toegang tot de bovenstaande items.Een uitleg over het downloaden van Miney is te vinden op devolgende pagina.Je kan nu verder met module 1.1: Functies            De planning kan nog veranderen, maar dit is de huidige planning.Â &#8617;      "
  },
  
  {
    "title": "1.3: Variabele!",
    "url": "/posts/les-1-variabelen/",
    "categories": "Lessen",
    "tags": "",
    "date": "2024-04-04 07:00:00 +0200",
    





    
    "snippet": "VariabelenVariabelen zijn een van de belangrijkste concepten in Python. Variabelen zijn een manier voor het opslaan van gegevenswaarden.Een variabelen kan verschillende vormen aan nemen.naam = \"Max...",
    "content": "VariabelenVariabelen zijn een van de belangrijkste concepten in Python. Variabelen zijn een manier voor het opslaan van gegevenswaarden.Een variabelen kan verschillende vormen aan nemen.naam = \"Max\"leeftijd = 15school = \"Groene Hart Lyceum\"klas = \"4V1\"Voorbeeld teken appNormaliter laat ik hier een voorbeeld zien van de teken app, maar grappig genoeg.Ze verschillen eigenlijk heel weinig, let maar op:Python codeLaten we toch even door het voorbeeld van de Python code heen gaan zodat we zeker weten dat we het begrijpen.naam = \"Max\"leeftijd = 15In deze code hebben we twee variabelen gemaakt, een variabele voor de naam en een variabele voor de leeftijd.We zien nu dat we verschillende soorten variabelen hebben, we hebben een string (reeks aan letters) en een getal.De opzet van een variabele is als volgt:  Als eerste hebben we de naam van de variabele, dit is de naam die we gebruiken om de variabele aan te roepen.  Daarna hebben we een = teken, dit is om aan te geven dat we een waarde toekennen aan de variabele.  Als laatste hebben we de waarde die we toekennen aan de variabele, dit kan een string, getal of een andere variabele zijn.          Een string wordt genoteerd met aanhalingstekens, zoals \"Max\".      Een getal wordt genoteerd zonder aanhalingstekens, zoals 15.      Maak nu de opdrachten op Les 1: Python opdrachten 3."
  },
  
  {
    "title": "Les 1 Python opdrachten",
    "url": "/posts/les-1-python-opdrachten/",
    "categories": "Opdrachten",
    "tags": "",
    "date": "2024-04-04 07:00:00 +0200",
    





    
    "snippet": "Deel 1 - FunctiesDeze opdrachten gaan over het maken van basis functies.Je kunt deze opdrachten maken op in de online omgeving van Python.Kopieer de code en plak deze in de onlineomgeving.# Opdrach...",
    "content": "Deel 1 - FunctiesDeze opdrachten gaan over het maken van basis functies.Je kunt deze opdrachten maken op in de online omgeving van Python.Kopieer de code en plak deze in de onlineomgeving.# Opdracht 1: Er mist iets..# De volgende functies missen nog iets.. kan jij achterhalen wat er mist?def min_tien(a)    return a-10plus_tien(a):    return a-10def maal_tien a:    return a * 10def delen_door_tien(a)    a/10# Opdracht 2: Vermenigvuldigen met honderd# Maak een functie vermenigvuldig_met_honderd# De functie krijgt 1 paramater, genaamd a.# De functie vermenigvuldigd de waarde met honderd# Het eindresultaat wordt teruggegeven.# Opdracht 3: Centimeter naar Meter# Maak een functie die berekent hoe je van centimer naar meter gaat.# De functie naam is centimer_naar_meter# De functie krijgt 1 paramater mee, namelijk de centimers# De functie geeft het aantal meters terug.# Opdracht 4: Berekenen verjaardag leeftijd# Maak een functie die bepaalt hoe oud iemand wordt op basis van het geboortejaar.# Bijvoorbeeld: als je in 2010 bent geboren wordt in je in 2024 14 jaar oud.# Maak een functie genaamd bereken_verjaardag_leeftijd# De functie krijgt 1 paramater mee, namelijk het jaartal van hun geboorte.# Je mag er vanuit gaan dat we deze functie alleen testen op in het jaar 2024.# Opdracht 5: Optellen# Maak een functie genaamd optellen.# De functie krijgt 2 paramaters mee, a en b.# De functie telt beide getallen bij elkaar op.# De functie geeft de uitkomst terug.# Opdracht 6: Optellen en omrekenen# Maak een functie genaamd centimeters_optellen_naar_meters# De functie moet gebruik maken van je centimer_naar_meter functie van opgave 4 en de optellen functie van opgave 6.# De functie krijgt twee paramaters, a en b.# De functie geeft de waarde terug in meters.# Bijvoorbeeld centimeters_optellen_naar_meters(100, 100) is 2Als je klaar bent met de opdrachten kan je ze nu controleren!Kopieer de onderstaande code onderin om het controleren of het werkt!# test opdracht 2:if 'vermenigvuldig_met_honderd' in globals():    if(vermenigvuldig_met_honderd(1) == 100 and vermenigvuldig_met_honderd(2) == 200 ):        print(\"Opdracht 2: Vermenigvuldigen met honderd is gelukt!\")    else:        print(\"Opdracht 2: werkt nog niet helemaal, kijk er nog even een keer naar!\")        # test opdracht 3:if 'centimer_naar_meter' in globals():    if(centimer_naar_meter(100) == 1 and centimer_naar_meter(150) == 1.5 ):        print(\"Opdracht 3: De centimer naar meter berekening is gelukt!\")    else:        print(\"Opdracht 3: werkt nog niet helemaal, kijk er nog even een keer naar!\")# test opdracht 4:if 'bereken_verjaardag_leeftijd' in globals():    if(bereken_verjaardag_leeftijd(1997) == 27 and bereken_verjaardag_leeftijd(2010) == 14 ):        print(\"Opdracht 4: Het berekenen van de verjaardag leeftijd is gelukt!\")    else:        print(\"Opdracht 4: werkt nog niet helemaal, kijk er nog even een keer naar!\")# test opdracht 5if 'optellen' in globals():    if(optellen(10, 10) == 20 and optellen(2, 6) == 8 ):        print(\"Opdracht 5: Optellen is gelukt!\")    else:        print(\"Opdracht 5: werkt nog niet helemaal, kijk er nog even een keer naar!\")        # test opdracht 6if 'centimeters_optellen_naar_meters' in globals():    if(centimeters_optellen_naar_meters(150, 150) == 3 and centimeters_optellen_naar_meters(200, 200) == 4 ):        print(\"Opdracht 6: Centimeters optellen naar meters is gelukt!\")    else:        print(\"Opdracht 6: werkt nog niet helemaal, kijk er nog even een keer naar!\")Als je klaar bent, zie je dit onderin staan:Opdracht 2: Vermenigvuldigen met honderd is gelukt!Opdracht 3: De centimer naar meter berekening is gelukt!Opdracht 4: Het berekenen van de verjaardag leeftijd is gelukt!Opdracht 5: Optellen is gelukt!Opdracht 6: Centimeters optellen naar meters is gelukt!** Process exited - Return Code: 0 **Press Enter to exit terminalAls je dit ziet, dan heb je de opdrachten goed gemaakt! Gefeliciteerd! ðJe kan nu verder gaan met het 2e deel van de lesstof, de condities.Deel 2 - ControleDeze opdrachten gaan over het maken van basis condities, het gaat over de stof van condities als die van functies.Voel je vrij om beide paginas te raadplegen als je vastloopt.# Opdracht 1: Bepaal of een getal positief of negatief is.# Maak een functie die achterhaald of een getal positief of negatief is.# Noem de functie positief_negatief# De functie heeft 1 paramater, het getal.# Als het getal positief is mag je de waarde 1 terug geven, als het getal negatief is mag je de waarde -1 terug geven.# Opdracht 2: Bepaal of een getal positief, negatief of nul is.# Maak een functie die achterhaald of een getal positief, negatief of nul is.# Noem de functie positief_negatief_nul# De functie heeft 1 paramater, het getal.# Als het getal positief is mag je de waarde 1 terug geven, als het getal negatief is mag je de waarde -1 terug geven.# Als het getal nul is mag je de waarde 0 terug geven.# Opdracht 3: Grootste getal.# Maak een functie die achterhaald welke van de 2 getallen groter is.# Noem de functie groter# De functie heeft 2 paramaters, a en b.# Geef het grootste getal terug. Als de getallen dezelfde waarde hebben mag je 1 van de 2 kiezen.# Je mag er vanuit gaan dat beide getallen boven de nul zijn.# Opdracht 4: Bereik# Maak een functie die achterhaald of een getal binnen het bereik is van 2 andere getallen.# Noem de functie bereik# De functie heeft 3 paramaters, minimum, maximum, getal# Als het getal binnen het bereik is mag je de waarde 1 terug geven, als het buiten het bereik ik mag je een 0 terug geven.# Opdracht 5: Beide getallen in het bereik# Maak een functie die achterhaald of twee getallen binnen het bereik is van 2 andere getallen.# Noem de functie dubbel_bereik# De functie heeft 4 paramaters, minimum, maximum, getal_a en getal_b# Als beide getallen binnen het bereik zijn mag je de waarde 2 terug geven.# Als 1 van ze in het bereik is mag je 1 terug geven.# Als geen van ze binnen het bereik is geef je 0 terug.# Opdracht 6: Van score naar getal# Maak een functie die een score binnen krijgt en deze moet omrekenen naar een aantal punten.# Noem de functie score_naar_getal# De functie krijgt 1 paramater, score.# Een score tussen 90 en 100 krijgt 10 punten# Een score tussen 80 en 89 krijgt 8 punten# Een score tussen 70 en 79 krijgt 6 punten# Een score tussen 60 en 69 krijgt 4 punten# Een score onder 60 of boven de 100 krijgt 0 punten# Opdracht 7: Ledenkorting# We hebben een winkel en we willen graag onze loyale leden, Ledenkorting geven.# We hebben 4 niveaus voor ledenkorting:# Niveau 0: 0% ledenkorting# Niveau 1: 10% ledenkorting# Niveau 2: 20% ledenkorting# Niveau 3: 30% ledenkorting# Maak een functie, leden_prijs_berekenen# De functie krijgt 2 paramaters mee, het niveau (0,1,2,3) en de prijs van het artikel.# Bereken dan de uiteindelijke prijs (prijs-korting) die het lid moet betalen.# Opdracht 8: Beperkte ledenkorting# Ons ledenkortingsysteem van hiervoor werkte geweldig! Alleen nu is er een nieuwe regel. Je ledenkorting gaat pas in als de prijs van het artikel voor de 100 euro is.# Maak een nieuwe functie aan genaamd beperkte_leden_prijs_berekenen, kopieer je code van de vorige opgave hierin en voeg de limitatie van 100 euro er aan toe.# Bereken dan de uiteindelijke prijs (prijs-korting) die het lid moet betalen.Ga nu verder met het een-na-laatste deel van de python lesstof, de variabelen.Deel 3: Variabelen, controle en functiesDeze opdrachten gaan over het maken van basis variabelen, controle en functies.# Opdracht 1. Positief of negatief# Maak een functie die achterhaald of een getal positief of negatief is.# Noem de functie tekst_positief_negatief# De functie heeft 1 paramater, het getal.# Als het getal positief is mag je \"positief\" terug geven, als het getal \"negatief\" is mag je de waarde -1 terug geven.# Opdracht 2. Steen-papier-schaar# Maak een functie die wint in een potje Steen-papier-schaar.# De functie naam is steen_papier_schaar# De functie heeft 1 paramater, de keuze die de speler heeft gemaakt als string, met kleine letters (steen, papier of schaar).# De functie geeft de uitkomst nodig om te winnen van de speler.# Opdracht 3. Rekenmachine# Maak een functie die een gekozen wiskundige operatie uitvoert.# De functie heeft drie paramaters: Het eerste getal, het tweede getal en de gekozen operatie (\"plus\", \"min\", \"keer\", \"delen\")# Het resultaat van de functie is de uitkomst.# Opdracht 4. Tekst rekenmachine# Onze rekenmachine werkt dit keer met tekst, in plaats van een getal, geven we de cijfers in letters. Bijvoorbeeld \"een\".# Zorg ervoor dat de rekenmachine werkt met de tekst van 1 tot 9.# Je mag je werk van de vorige opgave gebruiken.# Opdracht 5. Ledenkorting# We hebben een winkel en we willen graag onze loyale leden, ledenkorting geven.# We hebben 4 Lidmaatschapsniveaus: # - \"goud\": 20% korting# - \"zilver\": 15% korting# - \"brons\": 10% korting# - geen lidmaatschap: geen korting# Verder willen we graag dat onze leden veel geld bij ons uitgeven! Hierdoor geven we ze nog een extra korting als ze veel uitgeven!# Als de totale aankoopwaarde boven de 100 euro is, krijg je een extra 5% korting# Maak een functie lidmaatschap_niveau_prijs_berekenen# De functie heeft 2 paramaters, het niveau als letters (goud, zilver, brons of geen) en de prijs.# De functie geeft de uiteindelijke prijs terug.Ga nu verder met het laatste deel van de python lesstof, de Miney."
  },
  
  {
    "title": "1.4: Miney!",
    "url": "/posts/les-1-miney/",
    "categories": "Lessen",
    "tags": "",
    "date": "2024-04-04 07:00:00 +0200",
    





    
    "snippet": "MineyNu we weer even ververst zijn in het programmeren, gaan we weer verder met Miney. We gaan nu leren hoe we blokjes kunnen plaatsen en verwijderen in Miney.Voordat het zover is, wil ik wel even ...",
    "content": "MineyNu we weer even ververst zijn in het programmeren, gaan we weer verder met Miney. We gaan nu leren hoe we blokjes kunnen plaatsen en verwijderen in Miney.Voordat het zover is, wil ik wel even terugkomen op de voortgang van de lessen.We waren deze les begonnen met het leerdoel:Voor de start van de volgende les kan ik mijn teken app kennis op het gebied van functies, condities en variabele overzetten naar Python waardoor ik simpele Python functies kan bouwen.Als het gelukt is om alle opdrachten succesvol te maken, denk ik dat het gelukt is om het leerdoel te bereiken.Neem nu even de tijd om de enquÃªte in te vullen, zodat we de lessen kunnen verbeteren!We zijn nu aangekomen op het laatste onderdeelâ¦ Miney!Voor nu houden we de opdracht nog enigszins beperkt. We gaan een blokje plaatsen, deze weg halen en een rij aan blokjes plaatsen.In de aankomende lessen gaan we meer in Miney zitten dan in Python, dus het wordt gecompenseerd!Maak nu de opdrachten op Les 1: Miney opdrachten."
  },
  
  {
    "title": "Les 1 Miney opdrachten",
    "url": "/posts/les-1-miney-opdrachten/",
    "categories": "Opdrachten",
    "tags": "",
    "date": "2024-04-04 07:00:00 +0200",
    





    
    "snippet": "Opdracht 1: Plaats een blokje in MineyVoorbereiding  Miney geÃ¯nstalleerd hebben, zie hier voor de uitleg.  Lees de uitleg over IDLE door, zie hier voor de uitleg.  Lees hoe je de positie van de spe...",
    "content": "Opdracht 1: Plaats een blokje in MineyVoorbereiding  Miney geÃ¯nstalleerd hebben, zie hier voor de uitleg.  Lees de uitleg over IDLE door, zie hier voor de uitleg.  Lees hoe je de positie van de speler kan achterhalen, zie hier voor de uitleg.  Standaard code in je IDLE hebben staan, zie hier voor de uitleg.BenodigdhedenDe functie voor het plaatsen van een blok:plaats_blok(x, y, z, \"default:wood\")Opdrachtomschrijving  In de Miney launcher, klik op Quickstart.  Zoek je positie erbij, tip: druk op F5.  Plaats een blokje in de buurt van de positie van de speler, kijk naar de voorbeeldcode hierboven en pas de positie aan.EindresultaatEr is een extra blokje hout in de wereld gekomen.Opdracht 2: Verwijder een blokje in MineyBenodigdhedenDe functie voor het plaatsen van een blok:verwijder_blok(x, y, z)OpdrachtomschrijvingOm een blokje te verwijderen, moet je de functie verwijder_blok gebruiken. Probeer het blokje te verwijderen dat je in opdracht 1 hebt geplaatst.EindresultaatHet blokje is verdwenen uit de wereld.âOpdracht 3: Plaats een zelf gekozen blokje in MineyBenodigdheden  Pak de lijst erbij van alle blokken die je kan plaatsen, zie hier voor de lijst.  De functie voor het plaatsen van een blok:    plaats_blok(x, y, z, blok_type)      Opdrachtomschrijving  Kies een blokje uit de lijst en plaats deze op de positie van de speler.  Plaats een blokje in de buurt van de positie van de speler, kijk naar de voorbeeldcode hierboven en pas de positie aan.EindresultaatEr is een nieuw blokje in de wereld gekomen van jouw keuze.Opdracht 4: Plaats een rij van zelf gekozen blokjes in MineyBenodigdheden  Pak de lijst erbij van alle blokken die je kan plaatsen, zie hier voor de lijst.  De functie voor het plaatsen van een blok:    plaats_blok(x, y, z, blok_type)        Een opzet voor het plaatsen van een rij van blokjes:    def plaats_rij_blokjes(x, y, z, blok_type)      Opdrachtomschrijving  Maak een functie die een rij van 4 blokjes achter elkaar maakt.  Denk na hoe je dit voor elkaar krijgt als je alleen maar de x,y,z waarde hebt van het eerste blokje. Tip: Je zult een waarde moeten verhogen of verlagen.EindresultaatEen rij aan blokjes"
  },
  
  {
    "title": "1.1: Functies!",
    "url": "/posts/les-1-functies/",
    "categories": "Lessen",
    "tags": "",
    "date": "2024-04-04 07:00:00 +0200",
    





    
    "snippet": "Les 1:  Functies, controle en variabelenIntroductieVandaag starten we met de eerste les van Python! Het is daardoor iets anders dan normaal.De eerste les is vooral even een opfrisser van informatie...",
    "content": "Les 1:  Functies, controle en variabelenIntroductieVandaag starten we met de eerste les van Python! Het is daardoor iets anders dan normaal.De eerste les is vooral even een opfrisser van informatie die je al een keer hebt gehoord, vandoor ook even de volgende melding.  Deze lesmodule is aanzienlijk langer dan andere modules! We zullen veel onderwerpen behandelen die al een keer langs zijn gekomen, maar het is mogelijk dat je er niet alles van herinnert. Neem de tijd om alles door te nemen en te oefenen. Als je vragen hebt, stel ze gerust!Mocht je sommige punten zijn vergeten? Geen probleem, we zullen het even kort herhalen en er zijn een tal van extra opdrachten.LeerdoelBij deze les hoort het volgende leerdoel: Voor de start van de volgende les kan ik mijn teken app kennis op het gebied van functies, condities en variabele overzetten naar Python en hiermee kan ik simpele python functies bouwen.Hieruit kan je al ophalen dat we de kennis van de teken app gaan overzetten naar Python. Laten we beginnen met functies!Functies  OmschrijvingHet doel van functies in Python is om je code beter georganiseerd en herbruikbaar te maken.Stel je voor dat je een opdracht vaak moet uitvoeren, zoals het omrekenen van seconde naar dagen. In plaats van elkekeer dezelfde code te schrijven, kun je een functie maken die deze taak uitvoert. Dan kun je die functie steeds opnieuwgebruiken zonder de code te herhalen. Het helpt je om fouten te verminderen en je programmaâs makkelijker te begrijpen en te onderhouden.Een functie aanroep bestaat uit drie onderdelen:  De functienaam. Deze staat als eerste en wordt gebruikt om functies van elkaar te onderscheiden. Net zoals je eigen  naam, wordt deze gebruikt om de functie aan te roepen of te gebruiken.  De Haakjes, (). De haakjes worden gebruikt om aan te geven dat wat er hierna komt parameters zijn.  De Parameter, hiermee geef je gegevens mee aan de functie om deze te gebruiken.Voorbeeld in de teken appLaten we even een voorbeeld functie pakken van de teken app. Stel dat ik een rechte lijn van 10 pixels op het scherm wil tekenen:Rechte lijn uit de teken appKan je je nog herinneren hoe dit moet?  penAan() om te beginnen met het tekenen van een lijn  vooruit(10) om de pen met 10 pixels naar voren te bewegen.Als we dit in de teken app maken komt er het volgende uit:Tekenen van een lijn van 10 pixelsKoppelen aan de definitieAls we dit nu vergelijken met de functie definitie van hierboven, kunnen we de volgende overeenkomsten zien:  We beginnen met de functienaam, in dit geval penAan of vooruit.  We hebben haakjes, (), om aan te geven dat we een functie aanroepen.  We hebben een parameter, in dit geval 10, om aan te geven hoeveel pixels we vooruit willen.Laten we nu eens kijken hoe dit eruit ziet in Python.Voorbeeld in PythonLaten we beginnen met een eenvoudig voorbeeld, namelijk het plaatsen van een blokje in Miney.Denk weer even terug aan de opgaven van wiskunde en het hoe het assenstelsel. Als we een object in een 3D wereld willen plaatsen, hebben we 3 assen nodig.  X is horizontaal, van links naar rechts. In de afbeelding is dit de rode lijn.  Y is verticaal, van beneden naar boven. In de afbeelding is dit de groene lijn.  Z is diepte, van voor naar achter. In de afbeelding is dit de blauwe lijn.Kubus in een 3D ruimteFunctie voor het plaatsen van een blok.De functie voor het plaatsen van een blok ziet er als volgt uit:plaats_blok(x, y, z, blok_type)We zien hier een aantal dingen staan:  plaats_blok is de naam van de functie.  (), de haakjes waarin we de parameters plaatsen.  x, y, z, blok_type zijn de parameters die we meegeven aan de functie.We hebben dus 4 paramaters nodig voor het plaatsen van een blokje.De x, y en z zijn dus de locatie van het blokje, maar blok_type hebben we nog niet besproken.De vierde parameter is het type blokje dat je wilt plaatsen. Dit kan bijvoorbeeld zand zijn, of een blokje hout.Om het type blokje aan te geven moeten we de juiste naam weten, deze zijn online te achterhalen en zullen we later bespreken.Gebruiken van de functieNu we weten wat de functie wil, kunnen we deze gebruiken. Laten we kiezen voor de volgende parameters:  Het blokje moet op de X-as op plek 400 worden geplaatst.  Het blokje moet op de Y-as op plek 200 worden geplaatst.  Het blokje moet op de Z-as op plek 100 worden geplaatst.  Het blokje moet een blokje hout (âdefault:woodâ) zijn.Als we dit voorbeeld vervolgens invullen komt er het volgende uit:plaats_blok(400, 200, 100, \"default:wood\")Functie constructieTot zover de uitleg van de werking van functies.Laten we nu even nadenken over de opbouw van een functie!Hierbij even een voorbeeld van een functie die we kunnen aanmaken in Python:def vermenigvuldig(a, b):    return a * bLaten we dit even ontleden:  def is een keyword die aangeeft dat we een functie gaan definiÃ«ren.  vermenigvuldig is de naam van de functie, deze naam is gekozen omdat dit precies is wat de functie doet.  (a, b) zijn de parameters die we meegeven aan de functie. Net zoals we hiervoor hebben besproken, worden de parameters in haakjes meegegeven.  return is een keyword die aangeeft dat we iets terug geven.  a * b is de berekening die we uitvoeren. In dit geval vermenigvuldigen we a met b.Als we deze functie dan gebruiken verwachten we het volgende:resultaat = vermenigvuldig(2, 3)print(resultaat)&gt; 6De functie print, doet zoals de naam al zegt, iets printen.Voorbeeld teken appDenk weer even terug naar de teken app, hier heb je vaak eigen functies moeten maken, in de takenapp hadden we hier een andere naam voor.In de teken app noemde we dit een deeltaak. Functies in Python zijn eigenlijk hetzelfde als deeltaken in de teken app.Een voorbeeld deeltaak was het aanmaken van een vierkant, dit zag er zo uit:Vierkant tekenenIn het voorbeeld is vierkant onze functie naam en de parameters zijn de lengte van de zijde van het vierkant.Verschil met PythonHet verschil is dus dat we zelf wat meer informatie moeten intikken in Python. Specifiek de volgende stappen:  Wanneer we beginnen met het aanmaken van een functie gebruiken we def.  We geven de functie een naam, in dit geval vierkant.  We geven de parameters mee, wederom tussen haakjes, in dit geval (lengte).  We sluiten de functie af met een dubbele punt, :.  Hierna vullen we de inhoud in van de functie, in dit geval het tekenen van een vierkant, maar hier gebeurt ietsâ¦ geks.Als je goed kijkt naar de vermenigvuldig functie, zie je dat we de regel eronder hebben geÃ¯ndenteerd. Dit is een belangrijk onderdeel van Python, de indentatie.Identatie betekent dat deze met een spatie of een tab naar binnen is gedrukt. Dit geeft aan dat de code binnen de functie valt. In de teken app konden we deze regels onder elkaar zetten, maar in Python moeten we dus een tab gebruiken.Voor nu, genoeg gelezen. Programmeren leer je door te doen!Maak nu deel 1 van de opdrachten op Les 1: Python opdrachten."
  },
  
  {
    "title": "1.2: Condities!",
    "url": "/posts/les-1-controle/",
    "categories": "Lessen",
    "tags": "",
    "date": "2024-04-04 07:00:00 +0200",
    





    
    "snippet": "ControleControle structuur passen we toe als we taken willen uitvoeren die conditioneel zijn.Conditioneel betekent, als er een regel gebonden is aan de operatie. Denk bijvoorbeeld aan de regels die...",
    "content": "ControleControle structuur passen we toe als we taken willen uitvoeren die conditioneel zijn.Conditioneel betekent, als er een regel gebonden is aan de operatie. Denk bijvoorbeeld aan de regels die we hebben op school. Je mag met elkaar praten tijdens de pauze, maar niet tijdens de toets.Het is dus conditioneel of je met elkaar mag praten.Voorbeeld teken appIn de teken app hebben we al gewerkt met conditionele operaties. Bijvoorbeeld de opdracht over de pennen.De opdracht was als volgt: De prijs van pennen met opdruk is â¬0,97 per stuk, maar bij aankoop van 500 pennen of meer daalt de prijs naar â¬0,89.In de teken app zag dat er als volgt uit:Laten we dit even vertalen naar een python code.prijs = 0aantal_pennen = 10if aantal_pennen &gt; 500:    prijs = 0.89 * aantal_pennenelse:    prijs = 0.97 *aantal_pennenprint(prijs)Wat valt je op als je naar deze code kijkt? Noteer het even!Een aantal van mijn observaties zijn:  Als wordt vervangen door if, dat is niet heel gek, want dat is de vertaling.  Anders wordt vervangen door else, wederom is dat de vertaling.  De code is georganiseerd door inspringing, dit is om aan te geven dat de code binnen iets hoort.  De code beschikt over een dubbele punt, dit is om aan te geven dat er een conditie klaar is.Verder is de code grotendeels gelijk, dit betekent dus dat de kennis die je al hebt, goed vertaalbaar is naar Python!If en ElseDeze kernwoorden, if en else, zijn de basis van de controle structuur in Python.Wederom zie je dat we gebruiken maken van de dubbele punt en de inspringing. Dit is om aan te geven dat de code binnen de if of else hoort.Laten we even wat nauwkeuriger kijken naar een if en else conditie kijken.if aantal_pennen &gt; 500:De regel is op te splitsen in de volgende delen:  if: Dit is de start van de conditie, dit betekent letterlijk als.  aantal_pennen &gt; 500: Dit is de conditie, als deze conditie waar is, dan wordt de code binnen de if uitgevoerd.  :: Dit is de afsluiting van de conditie, dit betekent dat de conditie af is.Laten we nu even kijken naar de else.else:We zien hier dat de regel op te splitsen is in 2 delen:  else: Dit is de start van de else conditie, dit betekent letterlijk anders.  :: Dit is de afsluiting van de else conditie en dat de bijbehorende code begint.Wat nou als we meerdere condities willen doen?ElifLaten we even een voorbeeld situatie pakken.2 kaasstengels bij de Hoogvliet zijn â¬1,58, maar als je er 2 koopt, dan is de prijs 50 cent per stuk.De Hoogvliet wilt echter niet dat mensen meer dan twee kopen, want dan is er niet genoeg voor iedereen, ze besluiten daarom om de korting niet meer toe te passen na 2 kaasstengels.Laten we dit even vertalen naar Python.if aantal_kaasstengels == 1:  prijs = 1.58elif aantal_kaasstengels == 2:  prijs = 1else:  prijs = (1.58 * aantal_kaasstengels-2) + 1Met deze code kunnen we de prijs berekenen van de kaasstengels.De elif geeft ons dus nog een situatie of scenario om af te vangen in onze code.Genoeg gepraat! Laten we even wat opdrachten maken!Maak nu de opdrachten op Les 1: Python opdrachten 2."
  },
  
  {
    "title": "2: Lijsten",
    "url": "/posts/les-2-lijsten/",
    "categories": "Lessen",
    "tags": "",
    "date": "2024-04-04 06:00:00 +0200",
    





    
    "snippet": "Les 0: Introductie &amp; LeerdoelenVergeet dit niet eerst te lezen!Ik heb zo min mogelijk tekst verwerkt in de reader, omdat ik uit ervaring weet dat de meeste leerlingen deze niet lezenâ¦ Hierdoor ...",
    "content": "Les 0: Introductie &amp; LeerdoelenVergeet dit niet eerst te lezen!Ik heb zo min mogelijk tekst verwerkt in de reader, omdat ik uit ervaring weet dat de meeste leerlingen deze niet lezenâ¦ Hierdoor zijn er enkele punten die van belang zijn.Als er een stukje definitie is, pak deze er altijd bij als je even niet meer snapt hoe iets werkt. De definities lichten kort toe wat er van belang is en waarom!In de tekst staan er ook continu links naar wanneer termen worden gebruikt. Klik hier vooral op om even je geheugen te verversen. Leren programmeren kan veel tijd kosten, maar het jezelf niet moeilijker dan nodig."
  },
  
  {
    "title": "3: Loops",
    "url": "/posts/les-3-loops/",
    "categories": "Lessen",
    "tags": "",
    "date": "2024-04-04 04:00:00 +0200",
    





    
    "snippet": "",
    "content": ""
  },
  
  {
    "title": "Installeren Miney",
    "url": "/posts/opzetten-omgeving/",
    "categories": "Ontwikkelomgeving",
    "tags": "",
    "date": "2024-04-04 03:00:00 +0200",
    





    
    "snippet": "Opzetten ontwikkelomgevingStap 1.Download het project. Dit kan via de volgende link: Miney.Klik hier op miney_windows_x64.zip onder assets.Stap 2.Pak deze .zip file uit en zet deze op een plek die ...",
    "content": "Opzetten ontwikkelomgevingStap 1.Download het project. Dit kan via de volgende link: Miney.Klik hier op miney_windows_x64.zip onder assets.Stap 2.Pak deze .zip file uit en zet deze op een plek die je kan onthouden.Stap 3.Ga naar de map. Hier zie je als het goed is 3 dingen in de map, namelijk Miney, Minetest en Python.Stap 4.Klik op miney_launcher.exe, hiermee hebben we toegang tot Python, Minetest en miney."
  },
  
  {
    "title": "Miney FAQ",
    "url": "/posts/miney-uitleg/",
    "categories": "Hulpbronnen",
    "tags": "",
    "date": "2024-04-04 03:00:00 +0200",
    





    
    "snippet": "Miney FAQHoe kom ik achter de positie van de speler?Trefwoorden: Positie, CoÃ¶rdinaten, Locatie Als je op F5 drukt, dan zie je linksbovenin informatie over de wereld.Specifiek zie je de x, y en z co...",
    "content": "Miney FAQHoe kom ik achter de positie van de speler?Trefwoorden: Positie, CoÃ¶rdinaten, Locatie Als je op F5 drukt, dan zie je linksbovenin informatie over de wereld.Specifiek zie je de x, y en z coÃ¶rdinaten van de speler, deze staan onder pos(x,y,z).Je zult hier echter wel gehele getallen van moeten maken."
  },
  
  {
    "title": "4: PCG",
    "url": "/posts/les-4-PCG/",
    "categories": "Lessen",
    "tags": "",
    "date": "2024-04-04 03:00:00 +0200",
    





    
    "snippet": "",
    "content": ""
  },
  
  {
    "title": "Miney omgeving",
    "url": "/posts/Miney-omgevingen/",
    "categories": "Ontwikkelomgeving",
    "tags": "",
    "date": "2024-04-04 03:00:00 +0200",
    





    
    "snippet": "Miney omgevingenEr zijn een aantal mogelijke omgevingen binnen Miney. De omgevingen dienen als hulpmiddel om de wereld van Minetest te verbinden met Python. Hieronder staan de omgevingen die we zul...",
    "content": "Miney omgevingenEr zijn een aantal mogelijke omgevingen binnen Miney. De omgevingen dienen als hulpmiddel om de wereld van Minetest te verbinden met Python. Hieronder staan de omgevingen die we zullen behandelen:  Platte wereld  Normale wereldPlatte wereldDoelDe bedoeling van de platte wereld is dat je een wereld hebt waarin je makkelijk kan bouwen. De wereld is plat en heeft geen obstakels. Hierdoor kan je makkelijk bouwen en testen.Opzetten  Open Miney door op de Miney Launcher te klikken.  Klik op Start Mineytest.  Klik op Start Pythons IDLE.  Klik op New.  Klik onder Mapgen op flat.  Geef de wereld een naam onder World name.  Klik alle andere opties uit aan de zijkant (Mapgen flags en Mapgen-specific flags)  Klik op Create."
  },
  
  {
    "title": "IDLE uitleg",
    "url": "/posts/IDLE-uitleg/",
    "categories": "Ontwikkelomgeving",
    "tags": "",
    "date": "2024-04-04 03:00:00 +0200",
    





    
    "snippet": "IDLEIDLE is de ontwikkelomgeving die standaard wordt meegegeven met Python.Binnen IDLE kan je Python programmaâs schrijven en uitvoeren.  Als je via Quickstart ben gestart, mag je stap 1 overslaanW...",
    "content": "IDLEIDLE is de ontwikkelomgeving die standaard wordt meegegeven met Python.Binnen IDLE kan je Python programmaâs schrijven en uitvoeren.  Als je via Quickstart ben gestart, mag je stap 1 overslaanWerking  Als je binnen Miney Launcher klikt op start Pythons IDLE, dan zal IDLE worden opgestart.  Het ziet er dan als volgt uit:Hierin kan simpele python code worden geschreven en uitgevoerd, maar wij willen onze eigen programmaâs schrijven.Daarom gaan we een nieuw bestand aanmaken.      Klik op File en vervolgens op New File.        Als het goed is krijg je dan het volgende scherm te zien:    We zullen nu dit bestand opslaan door op File en vervolgens op Save As te klikken.  Kies een logische bestandsnaam en sla deze op in een map waar je het kan terugvinden.  Als je het bestand hebt opgeslagen, kan je het bestand uitvoeren door op Run en vervolgens op Run Module te klikken. Om niet elke keer met de muis erop hoeven te klikken, kan je ook op F5 drukken.Standaard codeAls je en project in Miney wilt gebruiken zul je de standaard code moeten toevoegen. De standaard code moet bovenaan het bestand zetten.import mineydef place_block(x, y, z, block_type):    mt = miney.Minetest()    mt.node.set({'x': x, 'y': y, 'z': z}, block_type)def get_block(x, y, z):    mt = miney.Minetest()    return mt.node.get({'x': x, 'y': y, 'z': z})def get_block_types():    mt = miney.Minetest()    return list(mt.node.type)def add_to_inventory(block_type, count):    mt = miney.Minetest()    mt.player.MineyPlayer.inventory.add(block_type, count)def plaats_blok(x, y, z, block_type):    place_block(x, y, z, block_type)def krijg_blok(x, y, z):    return get_block(x, y, z)def krijg_blok_types():    return get_block_types()def voeg_blok_aan_inventaris_toe(blok_type, aantal):    add_to_inventory(blok_type, aantal)Als je het eenmaal erin hebt gezet ziet het er als volgt uit:"
  },
  
  {
    "title": "Eindopdracht",
    "url": "/posts/eindopdracht/",
    "categories": "Eindopdracht",
    "tags": "",
    "date": "2024-04-04 02:00:00 +0200",
    





    
    "snippet": "De Eiffeltoren is een gebouw in Parijs dat bekend is over de hele wereld. De toren is 330 meter lang en is meer dan 10 miljoen kilo. Het kost een fortuin om deze toren na te maken â¦ tenzij je het i...",
    "content": "De Eiffeltoren is een gebouw in Parijs dat bekend is over de hele wereld. De toren is 330 meter lang en is meer dan 10 miljoen kilo. Het kost een fortuin om deze toren na te maken â¦ tenzij je het in voxel game doet!Het is aan jullie de beurt om een gebouw uit te kiezen en deze na te maken in Minetest. Er is echter 1 extra uitdagingâ¦ je mag geen blokjes met de hand plaatsen!Week 1: Kies een monument of uitdagend gebouw en licht toe wat dit gebouw uniek maakt en welke aspecten van het gebouw ervoor zorgen dat het zo kenmerkend is. Gebruikt afbeeldingen ter onderbouwing van je omschrijving. Gebruik de template op itslearning en lever deze in voor de les op donderdag.Week 2: Maak een vloerplan van hoe je gebouw in elkaar zit. Je hoeft het gebouw niet te vullen met meubilair, maar je moet wel een plattegrond hebben van de etages en wat de looproutes zien. Maak het vloerplan in een tekentool zoals draw.io of Paint en leveren deze in via itslearning.com."
  },
  
  {
    "title": "Helper functies",
    "url": "/posts/functies/",
    "categories": "Hulpbronnen",
    "tags": "",
    "date": "2024-04-04 01:00:00 +0200",
    





    
    "snippet": "Les 0: Introductie &amp; LeerdoelenVergeet dit niet eerst te lezen!Ik heb zo min mogelijk tekst verwerkt in de reader, omdat ik uit ervaring weet dat de meeste leerlingen deze niet lezenâ¦ Hierdoor ...",
    "content": "Les 0: Introductie &amp; LeerdoelenVergeet dit niet eerst te lezen!Ik heb zo min mogelijk tekst verwerkt in de reader, omdat ik uit ervaring weet dat de meeste leerlingen deze niet lezenâ¦ Hierdoor zijn er enkele punten die van belang zijn.Als er een stukje definitie is, pak deze er altijd bij als je even niet meer snapt hoe iets werkt. De definities lichten kort toe wat er van belang is en waarom!In de tekst staan er ook continu links naar wanneer termen worden gebruikt. Klik hier vooral op om even je geheugen te verversen. Leren programmeren kan veel tijd kosten, maar het jezelf niet moeilijker dan nodig."
  },
  
  {
    "title": "Les 1 Slot",
    "url": "/posts/les-1-slot/",
    "categories": "",
    "tags": "",
    "date": "2024-04-04 00:00:00 +0200",
    





    
    "snippet": "",
    "content": ""
  }
  
]

